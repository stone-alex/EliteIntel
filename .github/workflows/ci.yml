name: CI

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Oracle JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: oracle
          java-version: 17
          cache: gradle

      - name: Diagnose Gradle projects and tasks
        shell: cmd
        run: |
          gradlew.bat --version
          gradlew.bat -q projects
          gradlew.bat -q :app:tasks --all

      - name: Build (force shadowJar into distribution)
        shell: cmd
        run: |
          gradlew.bat --stacktrace --info :app:shadowJar --no-daemon

      - name: Locate elite_companion.jar if not in distribution
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          # Ensure distribution exists (your repo already contains it, but create if needed)
          if (-not (Test-Path "distribution")) { New-Item -ItemType Directory -Path "distribution" | Out-Null }

          # If jar is already there, great
          if (Test-Path "distribution\elite_companion.jar") {
            Write-Host "Found elite_companion.jar in distribution."
          } else {
            Write-Host "elite_companion.jar not in distribution, searching workspace..."
            $found = Get-ChildItem -Path . -Recurse -Filter "elite_companion.jar" -ErrorAction SilentlyContinue | Select-Object -First 1
            if ($found) {
              Write-Host "Found at: $($found.FullName). Copying to distribution..."
              Copy-Item -Force $found.FullName "distribution\elite_companion.jar"
            } else {
              Write-Host "No elite_companion.jar found anywhere."
            }
          }

          if (-not (Test-Path "distribution\elite_companion.jar")) {
            throw "elite_companion.jar not found after build. Check that :app exists and shadowJar produced the jar."
          }

      - name: Verify distribution contents
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          Write-Host "Listing 'distribution':"
          Get-ChildItem -Recurse "distribution" | Format-Table LastWriteTime, Length, Name, FullName

      - name: Package ZIP from distribution
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'
          $zipName = "elite-companion-${{ github.run_number }}.zip"
          if (Test-Path $zipName) { Remove-Item $zipName -Force }
          Compress-Archive -Path "distribution\*" -DestinationPath $zipName
          Write-Host "Packaged $zipName"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: elite-companion-*.zip
          if-no-files-found: error

  publish-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-windows
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Download packaged ZIP
        uses: actions/download-artifact@v4
        with:
          name: windows-zip

      - name: Create GitHub Release and upload asset (no third-party actions)
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = 'Stop'
          $tag = "${{ github.ref_name }}"
          $zip = Get-ChildItem -Filter 'elite-companion-*.zip' | Select-Object -First 1
          if (-not $zip) { throw "ZIP not found in workspace." }

          # If release doesn't exist, create; otherwise upload/overwrite asset
          gh release view $tag *> $null
          if ($LASTEXITCODE -ne 0) {
            gh release create $tag $zip.FullName --title "Release $tag" --notes "Automated release for $tag"
          } else {
            gh release upload $tag $zip.FullName --clobber
          }