name: CI

on:
  push:
    branches: [ "main" ]
    tags: [ "v*" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build-windows:
    runs-on: windows-latest
    permissions:
      contents: read
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Oracle JDK 17
        uses: actions/setup-java@v4
        with:
          distribution: oracle
          java-version: 17
          cache: gradle

      - name: Build and test (Gradle)
        shell: cmd
        run: |
          gradlew.bat --version
          gradlew.bat build --no-daemon

      - name: Package ZIP from distribution
        shell: pwsh
        run: |
          $ErrorActionPreference = 'Stop'

          if (-not (Test-Path "distribution")) {
            throw "distribution folder not found at repo root. Ensure the build writes outputs to ROOT/distribution."
          }
          if (-not (Test-Path "distribution\elite_companion.jar")) {
            throw "elite_companion.jar not found in distribution. Verify your build output configuration."
          }

          $zipName = "elite-companion-${{ github.run_number }}.zip"
          if (Test-Path $zipName) { Remove-Item $zipName -Force }

          # Zip the CONTENTS of distribution (not the folder itself)
          Compress-Archive -Path "distribution\*" -DestinationPath $zipName

          Write-Host "Packaged $zipName"

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-zip
          path: elite-companion-*.zip
          if-no-files-found: error

  publish-release:
    if: startsWith(github.ref, 'refs/tags/')
    needs: build-windows
    runs-on: windows-latest
    permissions:
      contents: write
    steps:
      - name: Download packaged ZIP
        uses: actions/download-artifact@v4
        with:
          name: windows-zip

      - name: Create GitHub Release and upload asset (no third-party actions)
        shell: pwsh
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          $ErrorActionPreference = 'Stop'
          $tag = "${{ github.ref_name }}"
          $zip = Get-ChildItem -Filter 'elite-companion-*.zip' | Select-Object -First 1
          if (-not $zip) { throw "ZIP not found in workspace." }

          # If release doesn't exist, create; otherwise upload/overwrite asset
          gh release view $tag *> $null
          if ($LASTEXITCODE -ne 0) {
            gh release create $tag $zip.FullName --title "Release $tag" --notes "Automated release for $tag"
          } else {
            gh release upload $tag $zip.FullName --clobber
          }