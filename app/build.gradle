plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow'
}

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    // Text to Speech
    implementation 'com.google.cloud:google-cloud-texttospeech:2.73.0'

    // Speech to Text
    implementation platform('com.google.cloud:libraries-bom:26.51.0')
    implementation 'com.google.cloud:google-cloud-speech:2.43.0'
    implementation 'com.google.api.grpc:proto-google-cloud-speech-v1p1beta1:0.135.0'
    implementation 'com.google.api.grpc:grpc-google-cloud-speech-v1p1beta1:0.135.0'

    // Gson for JSON parsing
    implementation 'com.google.code.gson:gson:2.13.1'

    // Guava for EventBus
    implementation 'com.google.guava:guava:33.0.0-jre'

    // Logging
    implementation 'org.apache.logging.log4j:log4j-slf4j2-impl:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-api:2.23.1'
    implementation 'org.apache.logging.log4j:log4j-core:2.23.1'
    // Reflections
    implementation 'org.reflections:reflections:0.9.12'

    //Utils
    implementation 'org.apache.commons:commons-lang3:3.18.0'

    //Look and Feel
    implementation 'com.formdev:flatlaf:3.5.2'
}



java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(21)
    }
}

application {
    mainClass = 'elite.intel.App'
}

sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources']
            include '**/*.json'
            include '**/*.conf'
            include '**/*.css'
            include '**/*.png'
            include '**/*.wav'
            include 'beep.wav'
            include '**/*.xml'
            include 'META-INF/MANIFEST.MF'
        }
    }
}

shadowJar {
    archiveFileName = 'elite_intel.jar'
    manifest {
        attributes 'Main-Class': 'elite.intel.App'
    }
    mergeServiceFiles()
    destinationDirectory = file("${rootProject.projectDir}/distribution")
}

// Ensure only the fat JAR is produced and used by assemble/build
tasks.named('jar') {
    enabled = false
}
tasks.named('assemble') {
    dependsOn tasks.shadowJar
}
