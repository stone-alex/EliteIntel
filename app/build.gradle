plugins {
    id 'java'
    id 'application'
    id 'com.github.johnrengelman.shadow'
}

repositories {
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots'
    }
}

dependencies {
    // Text to Speech
    implementation 'com.google.cloud:google-cloud-texttospeech:2.73.0'

    // Speech to Text
    implementation platform('com.google.cloud:libraries-bom:26.51.0')
    implementation 'com.google.cloud:google-cloud-speech:2.43.0'
    implementation 'com.google.api.grpc:proto-google-cloud-speech-v1p1beta1:0.135.0'
    implementation 'com.google.api.grpc:grpc-google-cloud-speech-v1p1beta1:0.135.0'

    // Authentication
    implementation 'com.google.auth:google-auth-library-oauth2-http:1.37.0'

    // CMU Sphinx for STT (fallback or hybrid)
    implementation 'edu.cmu.sphinx:sphinx4-core:5prealpha-SNAPSHOT'
    implementation 'edu.cmu.sphinx:sphinx4-data:5prealpha-SNAPSHOT'

    // Gson for JSON parsing
    implementation 'com.google.code.gson:gson:2.13.1'

    // Guava for EventBus
    implementation 'com.google.guava:guava:33.0.0-jre'

    // Logging
    implementation 'ch.qos.logback:logback-classic:1.5.6'
    implementation 'org.slf4j:slf4j-api:2.0.16'

    // Reflections
    implementation 'org.reflections:reflections:0.9.12'

    //Utils
    implementation 'org.apache.commons:commons-lang3:3.12.0'
}



java {
    toolchain {
        languageVersion = JavaLanguageVersion.of(17) // Enforce JDK 17
    }
}

application {
    mainClass = 'elite.companion.ui.MainApp'
    applicationDefaultJvmArgs = ['--add-modules', 'javafx.controls,javafx.fxml']
}

sourceSets {
    main {
        resources {
            srcDirs = ['src/main/resources']
            include '**/*.json'
            include '**/*.conf'
            include '**/*.css'
            include '**/*.png'
            include 'logback.xml'
            include 'META-INF/MANIFEST.MF'
        }
    }
}

shadowJar {
    archiveFileName = 'elite_companion.jar'
    manifest {
        attributes 'Main-Class': 'elite.companion.AppMain'
    }
    mergeServiceFiles()
    destinationDirectory = file("${rootProject.projectDir}/build/libs")
}