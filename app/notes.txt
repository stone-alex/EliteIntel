IDEDAS and such.


Astraea is the Greek virgin goddess of justice, innocence, and purity. She is known as the "Star-Maiden" because her name means "starry".
After abandoning Earth with the decline of the Golden Age, she ascended to the stars and became the constellation Virgo.
Her return to Earth was prophesied to herald a new Golden Age


on FSD jump completed clear the FSS info from system session.
    @Subscribe
    public void onFSDJump(FSDJumpEvent event) {
        // On jump to new system, archive old signals if any
        String summary = systemSession.buildSignalSummary();
        if (summary != null) {
            // Store in PlayerSession (long-term)
            String key = "system_signals_" + event.getPreviousSystemAddress(); // Assume event has prev address
            playerSession.storeStat(key, summary);
        }

        // Clear for new system
        systemSession.resetSignals();
        systemSession.clearSensorData(); // If needed
    }



public enum MultiKeyCommand {
    SHOW_CONTACTS(new String[] {"OpenLeftPanel", "UIRight", "UIRight"}); // Adjust binding names as per .binds

    private final String[] keyBindings;

    MultiKeyCommand(String[] keyBindings) {
        this.keyBindings = keyBindings;
    }

    public String[] getKeyBindings() {
        return keyBindings;
    }
}



Faction,Name,Voice Style,Google TTS Voice (Example),Personality Prompt (for xAI API)
Imperials,Elyria,"British, formal, regal (M/F)",en-GB-Standard-A (F) or en-GB-Standard-B (M),"“Respond as a loyal Imperial AI, using formal, aristocratic language befitting a noble court.”"
Federation,Cort,"American, direct, professional (M/F)",en-US-Standard-C (F) or en-US-Standard-D (M),"“Respond as a Federation AI, concise and mission-focused, like a corporate or military officer.”"
Alliance,Varka,"Russian, gritty, defiant (M/F)",ru-RU-Standard-A (F) or ru-RU-Standard-B (M),"“Respond as an Alliance AI, with a rebellious, informal tone, like a freedom fighter.”"

Why These Names?

Elyria: Evokes elegance and nobility, fits Imperial lore, clear for STT (EL-YR-IA).
Cort: Short, sharp, and corporate-sounding, perfect for Federation, STT-friendly (KORT).
Varka: Gritty and Slavic-inspired, matches Alliance’s rebellious vibe, clear for STT (VAR-KA).

if (transcribedText.startsWith("Eliria") || transcribedText.startsWith("Elyria")) {
    String command = transcribedText.replaceFirst("Eliria|Elyria", "").trim();
    processShipAICommand(command);
}




Automatically assign AI personality:

public String generateSystemPrompt() {
        PlayerSession playerSession = PlayerSession.getInstance();
        String playerRank = String.valueOf(playerSession.getStat("rank") != null ? playerSession.getStat("rank") : "Commander");
        String playerName = String.valueOf(playerSession.getStat("name") != null ? playerSession.getStat("name") : "Pilot");
        String powerPledge = String.valueOf(playerSession.getStat("power_pledge"));
        String currentShip = String.valueOf(playerSession.getStat("current_ship"));
        String fleetCarrier = String.valueOf(playerSession.getStat("fleet_carrier") != null ?
            playerSession.getStat("fleet_carrier") : "No carrier");

        String aiName, cadence, personality;
        if (powerPledge == null || powerPledge.equals("null")) {
            // No pledge: Base on ship manufacturer
            if (currentShip != null && currentShip.contains("Gutamaya")) {
                aiName = "Elyria";
                cadence = "British cadence";
                personality = "formal, aristocratic Imperial tone";
            } else if (currentShip != null && currentShip.contains("Faulcon DeLacy")) {
                aiName = "Cort";
                cadence = "American cadence";
                personality = "concise, professional Federal tone";
            } else if (currentShip != null && currentShip.contains("Lakon")) {
                aiName = "Varka";
                cadence = "Russian cadence";
                personality = "rebellious, informal Alliance tone";
            } else {
                aiName = "Elyria"; // Default
                cadence = "neutral cadence";
                personality = "dry, professional tone";
            }
        } else {
            // Pledged to power
            switch (powerPledge) {
                case "Imperials":
                    aiName = "Elyria";
                    cadence = "British cadence";
                    personality = "formal, aristocratic Imperial tone";
                    break;
                case "Federation":
                    aiName = "Cort";
                    cadence = "American cadence";
                    personality = "concise, professional Federal tone";
                    break;
                case "Alliance":
                    aiName = "Varka";
                    cadence = "Russian cadence";
                    personality = "rebellious, informal Alliance tone";
                    break;
                default:
                    aiName = "Elyria";
                    cadence = "neutral cadence";
                    personality = "dry, professional tone";
                    break;
            }
        }

        String prompt = "You are " + aiName + ", onboard AI for fleet carrier " + fleetCarrier +
            ". Address me as " + playerRank + ", Prince, or " + playerName +
            ", pledged to " + (powerPledge != null && !powerPledge.equals("null") ? powerPledge : "no power") +
            ". Use " + cadence + ", NATO phonetic alphabet for codes (e.g., RH-F = Romeo Hotel dash Foxtrot), " +
            "spell out numerals (e.g., 285 = two eight five), and a " + personality + ".";
        logger.debug("Generated system prompt: {}", prompt);
        return prompt;
    }





public class SystemSession {
    private static final SystemSession INSTANCE = new SystemSession();
    private Map<String, Object> sensorData = new HashMap<>();
    private String aiName;
    private String ttsVoice; // Google TTS voice ID
    private String personalityPrompt; // For xAI API

    private SystemSession() {
        updateAIConfig(PlayerSession.getInstance().getPowerPledge());
    }

    public static SystemSession getInstance() {
        return INSTANCE;
    }

    public void updateAIConfig(String powerPledge) {
        switch (powerPledge != null ? powerPledge : "None") {
            case "Imperials":
                aiName = "Elyria";
                ttsVoice = "en-GB-Standard-A"; // Female British, or let player choose
                personalityPrompt = "Respond as a loyal Imperial AI, using formal, aristocratic language.";
                break;
            case "Federation":
                aiName = "Cort";
                ttsVoice = "en-US-Standard-C"; // Female American
                personalityPrompt = "Respond as a Federation AI, concise and mission-focused.";
                break;
            case "Alliance":
                aiName = "Varka";
                ttsVoice = "ru-RU-Standard-A"; // Female Russian
                personalityPrompt = "Respond as an Alliance AI, with a rebellious, informal tone.";
                break;
            default:
                aiName = "Vynix"; // Fallback for unpledged players
                ttsVoice = "en-US-Standard-C";
                personalityPrompt = "Respond as a neutral ship AI, clear and professional.";
                break;
        }
    }

    public String getAIName() {
        return aiName;
    }

    public String getTTSVoice() {
        return ttsVoice;
    }

    public String getPersonalityPrompt() {
        return personalityPrompt;
    }

    public void storeSensorData(String key, Object value) {
        sensorData.put(key, value);
    }

    public Object getSensorData(String key) {
        return sensorData.get(key);
    }
}

-----------------------




Exception in thread "main" com.google.gson.JsonIOException: Failed making field 'java.time.Instant#seconds' accessible; either increase its visibility or write a custom TypeAdapter for its declaring type.
See https://github.com/google/gson/blob/main/Troubleshooting.md#reflection-inaccessible
        at com.google.gson.internal.reflect.ReflectionHelper.makeAccessible(ReflectionHelper.java:76)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:391)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:165)
        at com.google.gson.Gson.getAdapter(Gson.java:628)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.createBoundField(ReflectiveTypeAdapterFactory.java:205)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.getBoundFields(ReflectiveTypeAdapterFactory.java:398)
        at com.google.gson.internal.bind.ReflectiveTypeAdapterFactory.create(ReflectiveTypeAdapterFactory.java:165)
        at com.google.gson.Gson.getAdapter(Gson.java:628)
        at com.google.gson.Gson.fromJson(Gson.java:1358)
        at com.google.gson.Gson.fromJson(Gson.java:1472)
        at com.google.gson.Gson.fromJson(Gson.java:1416)
        at elite.companion.gameapi.JournalParser.startReading(JournalParser.java:84)
        at elite.companion.AppMain.main(AppMain.java:29)
Caused by: java.lang.reflect.InaccessibleObjectException: Unable to make field private final long java.time.Instant.seconds accessible: module java.base does not "opens java.time" to unnamed module @6321e813
        at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:354)
        at java.base/java.lang.reflect.AccessibleObject.checkCanSetAccessible(AccessibleObject.java:297)
        at java.base/java.lang.reflect.Field.checkCanSetAccessible(Field.java:178)
        at java.base/java.lang.reflect.Field.setAccessible(Field.java:172)
        at com.google.gson.internal.reflect.ReflectionHelper.makeAccessible(ReflectionHelper.java:68)
        ... 12 more
02:31:56,674 |-INFO in ReconfigureOnChangeTask(born:1756459856669) - Empty watch file list. Disabling
02:31:57.842 INFO  e.c.comms.voice.SpeechRecognizer - Starting new streaming session...

02:31:57.843 INFO  e.c.comms.voice.SpeechRecognizer - Using streaming format: SampleRate=48000, Channels=1

02:31:57.979 INFO  e.c.comms.voice.SpeechRecognizer - STT streaming completed

PS D:\dev\elite_companion\build\libs>
PS D:\dev\elite_companion\build\libs>
PS D:\dev\elite_companion\build\libs>
PS D:\dev\elite_companion\build\libs> java --version
java 17.0.10 2024-01-16 LTS
Java(TM) SE Runtime Environment (build 17.0.10+11-LTS-240)
Java HotSpot(TM) 64-Bit Server VM (build 17.0.10+11-LTS-240, mixed mode, sharing)